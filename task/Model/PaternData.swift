//
//  PaternData.swift
//  taskwithUIView
//
//  Created by Анатолий Коробских on 09.09.2024.


import Foundation

struct PatternData {
    
   var patternData: [PatternsModel] = [
        PatternsModel(patternImage: "abstract-factory",patternName: "Абстрактная фабрика",patternDescription: "это порождающий паттерн проектирования, который позволяет создавать семейства связанных объектов, не привязываясь к конкретным классам создаваемых объектов.",category: .Порождающие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "adapter", patternName: "Адаптер", patternDescription: "это структурный паттерн проектирования, который позволяет объектам с несовместимыми интерфейсами работать вместе.", category: .Структурные, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "bridge", patternName: "Мост", patternDescription: "это структурный паттерн проектирования, который разделяет один или несколько классов на две отдельные иерархии — абстракцию и реализацию, позволяя изменять их независимо друг от друга.", category: .Структурные, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "builder", patternName: "Строитель", patternDescription: "это порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово. Строитель даёт возможность использовать один и тот же код строительства для получения разных представлений объектов.", category: .Порождающие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "chain-of-responsibility", patternName: "Цепочка обязанностей", patternDescription: "это поведенческий паттерн проектирования, который позволяет передавать запросы последовательно по цепочке обработчиков. Каждый последующий обработчик решает, может ли он обработать запрос сам и стоит ли передавать запрос дальше по цепи.", category: .Поведенческие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "command", patternName: "Команда", patternDescription: "это поведенческий паттерн проектирования, который превращает запросы в объекты, позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их, а также поддерживать отмену операций.", category: .Поведенческие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "composite", patternName: "Компоновщик", patternDescription: "это структурный паттерн проектирования, который позволяет сгруппировать множество объектов в древовидную структуру, а затем работать с ней так, как будто это единичный объект.", category: .Структурные, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "decorator", patternName: "Декоратор", patternDescription: "это структурный паттерн проектирования, который позволяет динамически добавлять объектам новую функциональность, оборачивая их в полезные «обёртки».", category: .Структурные, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "facade", patternName: "Фасад", patternDescription: "это структурный паттерн проектирования, который предоставляет простой интерфейс к сложной системе классов, библиотеке или фреймворку.", category: .Структурные, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "factory-method", patternName: "Фабричный метод", patternDescription: "это порождающий паттерн проектирования, который определяет общий интерфейс для создания объектов в суперклассе, позволяя подклассам изменять тип создаваемых объектов.", category: .Порождающие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "flyweight", patternName: "Легковес", patternDescription: "это структурный паттерн проектирования, который позволяет вместить бóльшее количество объектов в отведённую оперативную память. Легковес экономит память, разделяя общее состояние объектов между собой, вместо хранения одинаковых данных в каждом объекте.", category: .Структурные, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "iterator", patternName: "Итератор", patternDescription: "это поведенческий паттерн проектирования, который даёт возможность последовательно обходить элементы составных объектов, не раскрывая их внутреннего представления.", category: .Поведенческие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "mediator", patternName: "Посредник", patternDescription: "это поведенческий паттерн проектирования, который позволяет уменьшить связанность множества классов между собой, благодаря перемещению этих связей в один класс-посредник.", category: .Поведенческие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "memento", patternName: "Снимок", patternDescription: "это поведенческий паттерн проектирования, который позволяет сохранять и восстанавливать прошлые состояния объектов, не раскрывая подробностей их реализации.", category: .Поведенческие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "observer", patternName: "Наблюдатель", patternDescription: "это поведенческий паттерн проектирования, который создаёт механизм подписки, позволяющий одним объектам следить и реагировать на события, происходящие в других объектах.", category: .Поведенческие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "prototype", patternName: "Прототип", patternDescription: "это порождающий паттерн проектирования, который позволяет копировать объекты, не вдаваясь в подробности их реализации.", category: .Порождающие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "proxy", patternName: "Заместитель", patternDescription: "это структурный паттерн проектирования, который позволяет подставлять вместо реальных объектов специальные объекты-заменители. Эти объекты перехватывают вызовы к оригинальному объекту, позволяя сделать что-то до или после передачи вызова оригиналу.", category: .Структурные, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "singleton", patternName: "Одиночка", patternDescription: "это порождающий паттерн проектирования, который гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа.", category: .Порождающие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "state", patternName: "Состояние", patternDescription: "это поведенческий паттерн проектирования, который позволяет объектам менять поведение в зависимости от своего состояния. Извне создаётся впечатление, что изменился класс объекта.", category: .Поведенческие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "strategy", patternName: "Стратегия", patternDescription: "это поведенческий паттерн проектирования, который определяет семейство схожих алгоритмов и помещает каждый из них в собственный класс, после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.", category: .Поведенческие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "template-method", patternName: "Шаблонный метод", patternDescription: "это поведенческий паттерн проектирования, который определяет скелет алгоритма, перекладывая ответственность за некоторые его шаги на подклассы. Паттерн позволяет подклассам переопределять шаги алгоритма, не меняя его общей структуры.", category: .Поведенческие, isFavorite: false, numberOfViews: 0),
        PatternsModel(patternImage: "visitor", patternName: "Посетитель", patternDescription: "это поведенческий паттерн проектирования, который позволяет добавлять в программу новые операции, не изменяя классы объектов, над которыми эти операции могут выполняться.", category: .Поведенческие, isFavorite: false, numberOfViews: 0)]
}
